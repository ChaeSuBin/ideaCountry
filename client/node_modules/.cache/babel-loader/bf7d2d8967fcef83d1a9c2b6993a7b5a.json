{"ast":null,"code":"var _jsxFileName = \"/home/giparang/threadweb/sinsekai/client/src/pages/vender.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport getWeb3 from '../getWeb3';\nimport EthReceiveContract from '../contracts/ReceiveEther.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Vender = () => {\n  _s();\n\n  const [ethBal, setEthBal] = useState(0);\n  const [contract_wallet, setWallet] = useState(null);\n  const [metaMaskFlag, setMetaMaskFlag] = useState(false);\n  const [account, setAccount] = useState(null);\n  const [errorMessage, setErrorMessage] = useState(null);\n  useEffect(() => {\n    connectWeb3();\n    const tmpFlag = window.ethereum && window.ethereum.isMetaMask;\n    setMetaMaskFlag(tmpFlag);\n  }, []);\n\n  const connectWeb3 = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3(); // Use web3 to get the user's accounts.\n\n      const accounts = await web3.eth.getAccounts(); // Get the contract instance.\n\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = EthReceiveContract.networks[networkId];\n      const instance_contract = new web3.eth.Contract(EthReceiveContract.abi, deployedNetwork && deployedNetwork.address);\n      setWallet(instance_contract); // web3.eth.getBlockNumber().then(result =>{\n      //   console.log(result);\n      // });\n\n      web3.eth.getBlock('latest').then(result => {\n        web3.eth.getTransaction(result.transactions[0]).then(result => {\n          console.log(result);\n        });\n      });\n    } catch (error) {\n      alert(`Failed to load web3, accounts, or contract. Check console for details.`);\n      console.error(error);\n    }\n  };\n\n  const connectWallet = () => {\n    window.ethereum.request({\n      method: \"eth_requestAccounts\"\n    }).then(result => {\n      setAccount(result[0]);\n    }).catch(error => {\n      setErrorMessage(error.message);\n    });\n  };\n\n  const getBalance = async () => {\n    const eth_amount = await contract_wallet.methods.getBalance().call(); //setEthBal(eth_amount);\n\n    console.log(eth_amount);\n  };\n\n  const insertCoin = () => {\n    contract_wallet.methods.sendViaCall().send({\n      from: account,\n      gas: 3000000,\n      value: 100000000000000\n    });\n  };\n\n  const viewblock = () => {};\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"a\", {\n      onClick: connectWallet,\n      children: \"Connect Wallet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 5\n    }, this), account, /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: getBalance,\n      children: \"temp-338\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: insertCoin,\n      children: \"temp-339\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: viewblock,\n      children: \"temp-001\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Vender, \"iiX5Dn8m1jmqJ2B9PQArV47HKko=\");\n\n_c = Vender;\n\nvar _c;\n\n$RefreshReg$(_c, \"Vender\");","map":{"version":3,"names":["React","useState","useEffect","getWeb3","EthReceiveContract","Vender","ethBal","setEthBal","contract_wallet","setWallet","metaMaskFlag","setMetaMaskFlag","account","setAccount","errorMessage","setErrorMessage","connectWeb3","tmpFlag","window","ethereum","isMetaMask","web3","accounts","eth","getAccounts","networkId","net","getId","deployedNetwork","networks","instance_contract","Contract","abi","address","getBlock","then","result","getTransaction","transactions","console","log","error","alert","connectWallet","request","method","catch","message","getBalance","eth_amount","methods","call","insertCoin","sendViaCall","send","from","gas","value","viewblock"],"sources":["/home/giparang/threadweb/sinsekai/client/src/pages/vender.js"],"sourcesContent":["import React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport getWeb3 from '../getWeb3';\nimport EthReceiveContract from '../contracts/ReceiveEther.json';\n\nexport const Vender = () => {\n    const [ethBal, setEthBal] = useState(0);\n    const [contract_wallet ,setWallet] = useState(null);\n    const [metaMaskFlag, setMetaMaskFlag] = useState(false);\n    const [account, setAccount] = useState(null);\n\tconst [errorMessage, setErrorMessage] = useState(null);\n\n  useEffect(() => {\n    connectWeb3();\n\tconst tmpFlag = window.ethereum && window.ethereum.isMetaMask;\n\tsetMetaMaskFlag(tmpFlag);\n  },[]);\n\n  const connectWeb3 = async() => {\n    try{\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3();\n        \n        // Use web3 to get the user's accounts.\n        const accounts = await web3.eth.getAccounts();\n  \n        // Get the contract instance.\n        const networkId = await web3.eth.net.getId();\n  \n        const deployedNetwork = EthReceiveContract.networks[networkId];\n        const instance_contract = new web3.eth.Contract(\n          EthReceiveContract.abi,\n          deployedNetwork && deployedNetwork.address,\n        );\n        setWallet(instance_contract);\n        // web3.eth.getBlockNumber().then(result =>{\n        //   console.log(result);\n        // });\n        web3.eth.getBlock('latest').then(result =>{\n          web3.eth.getTransaction(result.transactions[0]).then(result =>{\n            console.log(result);\n          });\n        });\n      }\n      catch(error){\n        alert(\n          `Failed to load web3, accounts, or contract. Check console for details.`,\n        );\n        console.error(error);\n      }\n  }\n    \n  const connectWallet = () => {\n    window.ethereum\n\t.request({ method: \"eth_requestAccounts\" })\n\t.then((result) => {\n\t\tsetAccount(result[0]);\n\t})\n\t.catch((error) => {\n\t  setErrorMessage(error.message);\n\t});\n  }\n\n  const getBalance = async() => {\n    const eth_amount = await contract_wallet.methods.getBalance().call();\n    //setEthBal(eth_amount);\n    console.log(eth_amount);\n  }\n  const insertCoin = () => {\n    contract_wallet.methods.sendViaCall().send({ \n      from: account,\n      gas: 3000000,\n      value: 100000000000000\n    });\n  }\n  const viewblock = () => {\n    \n  }\n  return (\n    <>\n    <a onClick={connectWallet}>Connect Wallet</a>\n    {account}\n    <button onClick={getBalance}>temp-338</button>\n    <button onClick={insertCoin}>temp-339</button>\n    <button onClick={viewblock}>temp-001</button>\n    </>\n  );\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}
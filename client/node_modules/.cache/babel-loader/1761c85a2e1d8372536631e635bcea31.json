{"ast":null,"code":"var _jsxFileName = \"/home/giparang/threadweb/sinsekai/client/src/pages/vender.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport getWeb3 from '../getWeb3';\nimport EthReceiveContract from '../contracts/ReceiveEther.json';\nimport { getAllPoints, getPlayerInfo } from \"../api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Vender = () => {\n  _s();\n\n  const uid = sessionStorage.getItem('userid'); // const [ethBal, setEthBal] = useState(0);\n  // const [contract_wallet ,setWallet] = useState(null);\n  // const [metaMaskFlag, setMetaMaskFlag] = useState(false);\n  // const [account, setAccount] = useState(null);\n  // const [errorMessage, setErrorMessage] = useState(null);\n\n  const [mintedPoint, setPoint] = useState(null);\n  const [mintedCoin, setCoin] = useState(null);\n  useEffect(() => {\n    // connectWeb3();\n    // const tmpFlag = window.ethereum && window.ethereum.isMetaMask;\n    // setMetaMaskFlag(tmpFlag);\n    getAllPoints().then(point => {\n      console.log(point);\n      setPoint(point.mintedAllPoint);\n      setCoin(point.mintedAllCoin);\n    });\n    getPlayerInfo(uid).then(user => {});\n  }, []);\n\n  const connectWeb3 = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3(); // Use web3 to get the user's accounts.\n\n      const accounts = await web3.eth.getAccounts(); // Get the contract instance.\n\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = EthReceiveContract.networks[networkId];\n      const instance_contract = new web3.eth.Contract(EthReceiveContract.abi, deployedNetwork && deployedNetwork.address);\n      setWallet(instance_contract); // web3.eth.getBlockNumber().then(result =>{\n      //   console.log(result);\n      // });\n\n      web3.eth.getBlock('latest').then(result => {\n        console.log(result);\n        web3.eth.getTransaction(result.transactions[0]).then(result => {\n          console.log(result.from, result.value);\n        });\n      });\n    } catch (error) {\n      alert(`Failed to load web3, accounts, or contract. Check console for details.`);\n      console.error(error);\n    }\n  };\n\n  const connectWallet = () => {\n    window.ethereum.request({\n      method: \"eth_requestAccounts\"\n    }).then(result => {\n      setAccount(result[0]);\n    }).catch(error => {\n      setErrorMessage(error.message);\n    });\n  };\n\n  const getBalance = async () => {\n    const eth_amount = await contract_wallet.methods.getBalance().call(); //setEthBal(eth_amount);\n\n    console.log(eth_amount);\n  };\n\n  const insertCoin = () => {\n    contract_wallet.methods.sendViaCall().send({\n      from: account,\n      gas: 3000000,\n      value: 100000000000000\n    });\n  };\n\n  const viewblock = () => {};\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        fontSize: 'x-large'\n      },\n      children: [\"\\uD604\\uC7AC 10P \\uB2F9 \\uAD50\\uD658\\uAC00\\uB2A5\\uD55C \\uC774\\uB354\\uB7C9:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 56\n      }, this), (100 - mintedCoin) / mintedPoint / 100, \" ETH\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\uB098\\uC758 \\uBCF4\\uC720 ETH: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\uB098\\uC758 \\uBCF4\\uC720 \\uD3EC\\uC778\\uD2B8: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: viewblock,\n      children: \"temp-001\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Vender, \"xP16IZd65L/j/uv8EwJ6JRztH98=\");\n\n_c = Vender;\n\nvar _c;\n\n$RefreshReg$(_c, \"Vender\");","map":{"version":3,"names":["React","useState","useEffect","getWeb3","EthReceiveContract","getAllPoints","getPlayerInfo","Vender","uid","sessionStorage","getItem","mintedPoint","setPoint","mintedCoin","setCoin","then","point","console","log","mintedAllPoint","mintedAllCoin","user","connectWeb3","web3","accounts","eth","getAccounts","networkId","net","getId","deployedNetwork","networks","instance_contract","Contract","abi","address","setWallet","getBlock","result","getTransaction","transactions","from","value","error","alert","connectWallet","window","ethereum","request","method","setAccount","catch","setErrorMessage","message","getBalance","eth_amount","contract_wallet","methods","call","insertCoin","sendViaCall","send","account","gas","viewblock","fontSize"],"sources":["/home/giparang/threadweb/sinsekai/client/src/pages/vender.js"],"sourcesContent":["import React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport getWeb3 from '../getWeb3';\nimport EthReceiveContract from '../contracts/ReceiveEther.json';\nimport { getAllPoints, getPlayerInfo } from \"../api\";\n\nexport const Vender = () => {\n  const uid=sessionStorage.getItem('userid');\n  // const [ethBal, setEthBal] = useState(0);\n  // const [contract_wallet ,setWallet] = useState(null);\n  // const [metaMaskFlag, setMetaMaskFlag] = useState(false);\n  // const [account, setAccount] = useState(null);\n\t// const [errorMessage, setErrorMessage] = useState(null);\n  const [mintedPoint, setPoint] = useState(null);\n  const [mintedCoin, setCoin] = useState(null);\n\n  useEffect(() => {\n    // connectWeb3();\n\t  // const tmpFlag = window.ethereum && window.ethereum.isMetaMask;\n\t  // setMetaMaskFlag(tmpFlag);\n    getAllPoints().then(point => {\n      console.log(point);\n      setPoint(point.mintedAllPoint);\n      setCoin(point.mintedAllCoin);\n    })\n    getPlayerInfo(uid).then(user => {\n      \n    })\n  },[]);\n\n  const connectWeb3 = async() => {\n    try{\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3();\n        \n        // Use web3 to get the user's accounts.\n        const accounts = await web3.eth.getAccounts();\n  \n        // Get the contract instance.\n        const networkId = await web3.eth.net.getId();\n  \n        const deployedNetwork = EthReceiveContract.networks[networkId];\n        const instance_contract = new web3.eth.Contract(\n          EthReceiveContract.abi,\n          deployedNetwork && deployedNetwork.address,\n        );\n        setWallet(instance_contract);\n        // web3.eth.getBlockNumber().then(result =>{\n        //   console.log(result);\n        // });\n        web3.eth.getBlock('latest').then(result =>{\n          console.log(result);\n          web3.eth.getTransaction(result.transactions[0]).then(result =>{\n            console.log(result.from, result.value);\n          });\n        });\n      }\n      catch(error){\n        alert(\n          `Failed to load web3, accounts, or contract. Check console for details.`,\n        );\n        console.error(error);\n      }\n  }\n    \n  const connectWallet = () => {\n    window.ethereum\n\t.request({ method: \"eth_requestAccounts\" })\n\t.then((result) => {\n\t\tsetAccount(result[0]);\n\t})\n\t.catch((error) => {\n\t  setErrorMessage(error.message);\n\t});\n  }\n\n  const getBalance = async() => {\n    const eth_amount = await contract_wallet.methods.getBalance().call();\n    //setEthBal(eth_amount);\n    console.log(eth_amount);\n  }\n  const insertCoin = () => {\n    contract_wallet.methods.sendViaCall().send({ \n      from: account,\n      gas: 3000000,\n      value: 100000000000000\n    });\n  }\n  const viewblock = () => {\n    \n  }\n  return (\n    <>\n    {/* <a onClick={connectWallet}>Connect Wallet</a>\n    {account}\n    <button onClick={getBalance}>temp-338</button>\n    <button onClick={insertCoin}>temp-339</button> */}\n    <p style={{fontSize:'x-large'}}>현재 10P 당 교환가능한 이더량:<br/>{((100-mintedCoin)/mintedPoint)/100} ETH</p>\n    <p>나의 보유 ETH: </p>\n    <p>나의 보유 포인트: </p>\n    <button onClick={viewblock}>temp-001</button>\n    </>\n  );\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}
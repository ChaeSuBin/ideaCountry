{"ast":null,"code":"var _jsxFileName = \"/home/giparang/threadweb/sinsekai/client/src/pages/vender.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport getWeb3 from '../getWeb3';\nimport EthReceiveContract from '../contracts/ReceiveEther.json';\nimport { getAllPoints, getPlayerInfo, putChangeCoin } from \"../api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Vender = () => {\n  _s();\n\n  const uid = sessionStorage.getItem('userid');\n  const [ethBal, setEthBal] = useState(0);\n  const [contract_wallet, setWallet] = useState(null);\n  const [metaMaskFlag, setMetaMaskFlag] = useState(false);\n  const [account, setAccount] = useState(null);\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [mintedPoint, setPoint] = useState(null);\n  const [mintedCoin, setCoin] = useState(null);\n  const [userPoint, setUserPoint] = useState(0);\n  const [userCoin, setUserCoin] = useState(0);\n  const [changePoint, setCall] = useState(0);\n  const [reqPoint, setReqPoint] = useState(0);\n  useEffect(() => {\n    connectWeb3();\n    const tmpFlag = window.ethereum && window.ethereum.isMetaMask;\n    setMetaMaskFlag(tmpFlag); // getAllPoints().then(point => {\n    //   console.log(point);\n    //   setPoint(point.mintedAllPoint);\n    //   setCoin(point.mintedAllCoin);\n    // })\n    // getPlayerInfo(uid).then(user => {\n    //   setUserCoin(user.coin);\n    //   setUserPoint(user.token);\n    // })\n  }, []);\n\n  const connectWeb3 = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3(); // Use web3 to get the user's accounts.\n\n      const accounts = await web3.eth.getAccounts(); // Get the contract instance.\n\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = EthReceiveContract.networks[networkId];\n      const instance_contract = new web3.eth.Contract(EthReceiveContract.abi, deployedNetwork && deployedNetwork.address);\n      setWallet(instance_contract); // web3.eth.getBlockNumber().then(result =>{\n      //   console.log(result);\n      // });\n\n      web3.eth.getBlock('latest').then(result => {\n        console.log(result);\n        web3.eth.getTransaction(result.transactions[0]).then(result => {\n          console.log(result.from, result.value);\n        });\n      });\n    } catch (error) {\n      alert(`Failed to load web3, accounts, or contract. Check console for details.`);\n      console.error(error);\n    }\n  };\n\n  const connectWallet = () => {\n    window.ethereum.request({\n      method: \"eth_requestAccounts\"\n    }).then(result => {\n      setAccount(result[0]);\n    }).catch(error => {\n      setErrorMessage(error.message);\n    });\n  };\n\n  const getBalance = async () => {\n    const eth_amount = await contract_wallet.methods.getBalance().call(); //setEthBal(eth_amount);\n\n    console.log(eth_amount);\n  };\n\n  const insertCoin = () => {\n    contract_wallet.methods.sendViaCall().send({\n      from: account,\n      gas: 3000000,\n      value: 100000000000000\n    });\n  };\n\n  const pointToCoinBtn = _PtoC => {\n    if (uid !== null) {\n      if (_PtoC) {\n        if (changePoint % 100 === 0 && changePoint <= userPoint) {\n          putChangeCoin({\n            account: uid,\n            point: changePoint,\n            PtoC: _PtoC\n          }).then(result => {\n            alert(`${changePoint}point가 ${result}Eth로 전환 완료되었습니다`);\n          });\n        } else if (changePoint > userPoint) alert('소지 포인트 부족');else alert('입력 에러\\n(100 포인트 단위로만 입력가능합니다)');\n      } else {\n        if ((100 - mintedCoin) / mintedPoint / 10000 * reqPoint <= userCoin) {\n          putChangeCoin({\n            account: uid,\n            point: reqPoint,\n            PtoC: _PtoC\n          }).then(result => {\n            alert(`${result}Eth가 ${reqPoint}point로 전환 완료되었습니다`);\n          });\n        } else alert('소지 Eth 부족');\n      }\n    } else {\n      alert('로그인이 필요한 서비스 입니다.');\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"a\", {\n      onClick: connectWallet,\n      children: \"Connect Wallet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 5\n    }, this), account, /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: getBalance,\n      children: \"temp-338\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: insertCoin,\n      children: \"temp-339\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Vender, \"6RJHTZF0pLey8NiYW5OsbXLYeb4=\");\n\n_c = Vender;\n\nvar _c;\n\n$RefreshReg$(_c, \"Vender\");","map":{"version":3,"names":["React","useState","useEffect","getWeb3","EthReceiveContract","getAllPoints","getPlayerInfo","putChangeCoin","Vender","uid","sessionStorage","getItem","ethBal","setEthBal","contract_wallet","setWallet","metaMaskFlag","setMetaMaskFlag","account","setAccount","errorMessage","setErrorMessage","mintedPoint","setPoint","mintedCoin","setCoin","userPoint","setUserPoint","userCoin","setUserCoin","changePoint","setCall","reqPoint","setReqPoint","connectWeb3","tmpFlag","window","ethereum","isMetaMask","web3","accounts","eth","getAccounts","networkId","net","getId","deployedNetwork","networks","instance_contract","Contract","abi","address","getBlock","then","result","console","log","getTransaction","transactions","from","value","error","alert","connectWallet","request","method","catch","message","getBalance","eth_amount","methods","call","insertCoin","sendViaCall","send","gas","pointToCoinBtn","_PtoC","point","PtoC"],"sources":["/home/giparang/threadweb/sinsekai/client/src/pages/vender.js"],"sourcesContent":["import React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport getWeb3 from '../getWeb3';\nimport EthReceiveContract from '../contracts/ReceiveEther.json';\nimport { getAllPoints, getPlayerInfo, putChangeCoin } from \"../api\";\n\nexport const Vender = () => {\n  const uid=sessionStorage.getItem('userid');\n  const [ethBal, setEthBal] = useState(0);\n  const [contract_wallet ,setWallet] = useState(null);\n  const [metaMaskFlag, setMetaMaskFlag] = useState(false);\n  const [account, setAccount] = useState(null);\n\tconst [errorMessage, setErrorMessage] = useState(null);\n\n  const [mintedPoint, setPoint] = useState(null);\n  const [mintedCoin, setCoin] = useState(null);\n  const [userPoint, setUserPoint] = useState(0);\n  const [userCoin, setUserCoin] = useState(0);\n  const [changePoint, setCall] = useState(0);\n  const [reqPoint, setReqPoint] = useState(0);\n\n  useEffect(() => {\n    connectWeb3();\n\t  const tmpFlag = window.ethereum && window.ethereum.isMetaMask;\n\t  setMetaMaskFlag(tmpFlag);\n    // getAllPoints().then(point => {\n    //   console.log(point);\n    //   setPoint(point.mintedAllPoint);\n    //   setCoin(point.mintedAllCoin);\n    // })\n    // getPlayerInfo(uid).then(user => {\n    //   setUserCoin(user.coin);\n    //   setUserPoint(user.token);\n    // })\n  },[]);\n\n  const connectWeb3 = async() => {\n    try{\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3();\n        \n        // Use web3 to get the user's accounts.\n        const accounts = await web3.eth.getAccounts();\n  \n        // Get the contract instance.\n        const networkId = await web3.eth.net.getId();\n  \n        const deployedNetwork = EthReceiveContract.networks[networkId];\n        const instance_contract = new web3.eth.Contract(\n          EthReceiveContract.abi,\n          deployedNetwork && deployedNetwork.address,\n        );\n        setWallet(instance_contract);\n        // web3.eth.getBlockNumber().then(result =>{\n        //   console.log(result);\n        // });\n        web3.eth.getBlock('latest').then(result =>{\n          console.log(result);\n          web3.eth.getTransaction(result.transactions[0]).then(result =>{\n            console.log(result.from, result.value);\n          });\n        });\n      }\n      catch(error){\n        alert(\n          `Failed to load web3, accounts, or contract. Check console for details.`,\n        );\n        console.error(error);\n      }\n  }\n    \n  const connectWallet = () => {\n    window.ethereum\n\t.request({ method: \"eth_requestAccounts\" })\n\t.then((result) => {\n\t\tsetAccount(result[0]);\n\t})\n\t.catch((error) => {\n\t  setErrorMessage(error.message);\n\t});\n  }\n\n  const getBalance = async() => {\n    const eth_amount = await contract_wallet.methods.getBalance().call();\n    //setEthBal(eth_amount);\n    console.log(eth_amount);\n  }\n  const insertCoin = () => {\n    contract_wallet.methods.sendViaCall().send({ \n      from: account,\n      gas: 3000000,\n      value: 100000000000000\n    });\n  }\n  const pointToCoinBtn = (_PtoC) => {\n    if(uid!==null){\n      if(_PtoC){\n        if(changePoint % 100 ===0 && changePoint <= userPoint){\n          putChangeCoin({account: uid, point: changePoint, PtoC: _PtoC}).then(result => {\n            alert(`${changePoint}point가 ${result}Eth로 전환 완료되었습니다`);\n          })\n        }\n        else if(changePoint > userPoint) alert('소지 포인트 부족');\n        else alert('입력 에러\\n(100 포인트 단위로만 입력가능합니다)');\n      }\n      else{\n        if(((((100-mintedCoin)/mintedPoint)/10000)*reqPoint) <= userCoin){\n          putChangeCoin({account: uid, point: reqPoint, PtoC: _PtoC}).then(result => {\n            alert(`${result}Eth가 ${reqPoint}point로 전환 완료되었습니다`);\n          })\n        }\n        else alert('소지 Eth 부족');\n      }\n    }\n    else{\n      alert('로그인이 필요한 서비스 입니다.');\n    }\n  }\n  return (\n    <>\n    <a onClick={connectWallet}>Connect Wallet</a>\n    {account}\n    <button onClick={getBalance}>temp-338</button>\n    <button onClick={insertCoin}>temp-339</button>\n    {/* <p style={{fontSize:'x-large', marginBottom:'0px'}}>현재 100P 당 교환가능한 이더량:<br/>{((100-mintedCoin)/mintedPoint)/100} ETH</p>\n    <p style={{marginTop:'0px'}}>(환율 계산식: (ETH의 잔량 / 포인트 발행량) / 100)</p><br/>\n    <p>나의 보유 ETH: {userCoin}</p>\n    <p>나의 보유 포인트: {userPoint}</p><br/>\n    <input type='number' min={0} max={999900} step={100} placeholder={'input point'} onChange={(evt)=>setCall(evt.target.value)}></input>\n    <button className=\"App-exeButton\" onClick={()=>pointToCoinBtn(true)}>point-&gt;Eth</button>\n    지급될 eth: {((((100-mintedCoin)/mintedPoint)/10000)*changePoint).toFixed(5)}\n    <br/>\n    <input type='number' min={0} max={999000} step={10} placeholder={'input point'} onChange={(evt)=>setReqPoint(evt.target.value)}></input>\n    <button className=\"App-exeButton\" onClick={()=>pointToCoinBtn(false)}>Eth-&gt;Point</button>\n    필요한 eth: {((((100-mintedCoin)/mintedPoint)/10000).toFixed(6)*reqPoint).toFixed(5)} */}\n    </>\n  );\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}